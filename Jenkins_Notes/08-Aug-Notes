
Master and Agent Set up
=============================================================

Step 1: create a workder/agent node (VM of type linux) on AWS

Step 2: Install git and java on worker node

# yum install git -y

# sudo amazon-linux-extras install java-openjdk11 -y

Step 3: Create remote root directory on the worker & give permissions for access

cd /tmp

mkdir jenkinsdir

Give permission to remote root directory

chmod -R 777 /tmp/jenkinsdir

Step 4: Go to master machine and update Jenkins URL

Manage Jenkins> Configure System > update the latest jenkins URL to the current url > save the page


Step 5: On master machine open Agent port

Manage Jenkins> Configure Global Security> scroll down to agents > select random and save the page

Step 6: Configure worker/agent node on master

Manage Jenkins> Manage nodes and clouds

Number of executors= executor = Job ==> 1
remote root directory : /tmp/jenkinsdir
label : linux_node
Usage: only build jobs with matching labels


Step 7: check if connection is succesfull

Step 8: add agent in the piepline

=========================================================
==========================================================================

pipelines Using plugins are called as Plugin based pipelines or Upstream and downstream pipelines
These pipelines are created using freestyle jobs.

Jenkins allows us to create multiple task in one single job.

Whenever a user has to perfom set of tasks one after other (in a sequence) or in parallel, it can easily be done using 
pipleine project template in jenkins

Pipleines in jenkins are nothing but set of task executed in sequence(by default) 

When a user is creating a pipeline we will have to write code for it.
The pipeline code is based on Groovy scripting which is Domain specific lanaguage
In jenkins pipeline code using 2 types of syntax

 > scripted pipeline syntax
=======================================
> scripted pipeline syntax always starts with a keyword called as node
> When Jenkins version1 came in to the market, the admin used scripted pipeline syntax to write pipeline code
> scripted pipeline syntax is difficult to read and write.
> there is no structure or no definite style which writitng the code
> The code written scripted pipeline syntax is not validated by jenkins
> This syntax is no longer used
> if the pipeline fails, you have to run the pipeline from the begining

 > Declarative pipeline syntax
========================================
> Declarative pipeline syntax always starts with a keyword called as pipeline
> With jenkins version2, Declarative pipeline syntax was introduced
> This is well structured syntax, where user is provided with definite pipeline sections
> we need to just declare the pipeline code
> It declarative in nature, syntax is very simple
> if the pipeline failes, you can restart the pipeline form the point that it had failed previously
> Stages in pipeline means Job to be executed
> Every stage will have a Name in the pipeline, steps to be executed, post build steps, 
> jenkins provides a pipeline code snippet generator, that helps your to learn pipeline scripting very fast

Syntax:  key 'value' 
for example: name 'Jenkins'
             sh 'echo "hello All"'

Structure of Declarative pipeline syntax

=========================================

pipeline{

 tools{
  // names of tools configured that jenkins  will use while executing the pipleline
}

agents {
 // name of the server where jenkisn can dispatch the jobs
}

parameters{
               name 'Sonal'
}

triggers{

pollSCM('* * * * *')

}

// to write comments
// stages is the mandory section in a pipeline
stages{

stage('job1'){

steps{
        sh 'echo $name'   
}

}

parallel {

stage('job2'){

steps{   //build steps
           // what shoudl this job do
}

}

stage('job3'){

steps{
           // what shoudl this job do
}

}

}



}
 

}

==============================

pipeline{
    
    tools{
        maven 'mymaven'
    }
   // in agent any = any available server 
    agent any
   stages{
       stage('Clone a Repo'){
           steps{
               git 'https://github.com/Sonal0409/DevOpsCodeDemo.git'
           }
       }
       
       stage('Compile the code'){
           steps{
               sh 'mvn compile'
           }
       }
       
       stage('CodeReview'){
           steps{
               sh 'mvn pmd:pmd'
           }
       }
       
       stage('Unit Test'){
           steps{
               sh 'mvn test'
           }
       }
       
       stage('Package'){
           steps{
               sh 'mvn clean install package'
           }
       }
       }
}




Parallel stages

pipeline{
    
    tools{
        maven 'mymaven'
    }

    agent any

   stages{
       stage('Clone a Repo'){
           steps{
               git 'https://github.com/Sonal0409/DevOpsCodeDemo.git'
           }
       }

      stage('parallel stage') {

      parallel {

       	stage('Compile the code'){
          	 steps{
              	 sh 'mvn compile'
          	 }
      	 }
       
       stage('CodeReview'){
           	steps{
               sh 'mvn pmd:pmd'
           }
       }
    }
  }
 }
}
======================================

pipeline {
    agent any
    stages {
        stage('job1') {
            steps {
                sh 'mkdir sonal'
            }
        }
        stage('job2') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    sh "mkdir sonal"
                }
            }
        }
        stage('job3') {
            steps {
                sh 'touch myfile'
            }
        }
    }
}

============================================================

1. It is better that you write and maintain your pipeline code in Github, so that many team members can collaborate to the pipeline
2. it allows version control the changes done on pipelines.

3. How will jenkins read pipeline code from github?

Jenkins uses the concept of Jenkinsfile

It is a simple text file. it has no extention 
Name is preffered as Jenkinsfile
This is the file in which we will maintain pipeline code Version control


Jenkins--> pipelinetemplate--> fetch jenkins file--> execute pipeline code for you.
