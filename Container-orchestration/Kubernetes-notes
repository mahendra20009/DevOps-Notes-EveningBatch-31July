==================================================================

Kubernetes:
===================

K8s code is written in YAML

YAML syntax is very easy

key: "value"

spacing is important

tool using YAML, will provide you the key or its key name
User has to just give the values

values can be signle value or list of values
values can string, integer, decimal,date

These files have an extension as YAMl or YML

Example: storing single value

---
company: Edureka
training: devops
trainer: sonal mittal
time: 7PM
days: weekdpas
...

Example: storing multiple values in a key

---
company: Edureka
trainings:
  - devops
  - aws
  - gcp
  - selenium
trainers:
  - Sonal
  - Jaya
  - MArc
  - Jack

example: store data as an object

---
company: Edureka
trainings:
  - devops
  - aws
  - gcp
  - selenium
trainers:
  - Name: Sonal
    phone: 979887345
    emial: sdfsdf#dfgdfg
  - Name: Jaya
    phone: 3435345
    email: 43535
timings:
 - weekdays:
    days: mon-friday
 - weekends:
    morning: 7am
    eveinign: 7am


================================

Create a pod in kubernetes:

apiVersion: v1
kind: Pod
metadata:
  name: pod1
  labels:
    author: sonal
    env: dev
    app: webserver
spec:
 containers:
  - name: c1
    image: nginx

================================

MultiContainer Pod

apiVersion: v1
kind: Pod
metadata:
  name: pod1
  labels:
    author: sonal
    env: dev
    app: webserver
spec:
 containers:
  - name: c1
    image: nginx
  - name: c2
    image: tomcat
  - name: c3
    image: ubuntu
    command: ["bash","-c", "sleep 6000"]

============================================

Service Object:

Cluster IP:
==========================================

Notes are available in below link:

https://github.com/Sonal0409/Container-Orchestration-using-Kubernetes/tree/main/Day2-Notes/ServicesDemo/ClusterIPDemo

NodePort:

https://github.com/Sonal0409/Container-Orchestration-using-Kubernetes/tree/main/Day2-Notes/ServicesDemo/NodePortDemo

Load Balancer:

---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
 name: myrs
spec:
 replicas: 3
 selector:
  matchLabels:
   type: webserver
 template:
  metadata:
   name: mypod
   labels:
    type: webserver
  spec:
   containers:
    - name: c1
      image: leaddevops/kubeserve:v1

   
---
apiVersion: v1
kind: Service
metadata:
 name: mysvc
spec:
 type: LoadBalancer
 ports:
  - targetPort: 80
    port: 80
 selector:
  type: webserver

=======================================

Deployment and Service Object:
=====================================

kind: Deployment
apiVersion: apps/v1
metadata:
  name: kubeserve
spec:
  replicas: 3
  selector:
    matchLabels:
      app: kubeserve
  template:
    metadata:
      name: kubeserve
      labels:
        app: kubeserve
    spec:
      containers:
       - name: app
         image: leaddevops/kubeserve:v1
        
---
kind: Service
apiVersion: v1
metadata:
   name: kubeserve-svc
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 80
  selector: 
    app: kubeserve
